// Em boleto/ProcessadorLinhaDigitavel.java

package boleto;

import boleto.ValidadorLinhaDigitavel;
import verificacao.ConsultaCNPJ;
import verificacao.ConsultaBanco;
import usuario.Boleto;
import java.math.BigDecimal;
import java.util.Scanner;

public class ProcessadorLinhaDigitavel {

    private Scanner scanner;

    public ProcessadorLinhaDigitavel(Scanner scanner) {
        this.scanner = scanner;
    }

    public void processar() {
        System.out.println("\n--- Processamento de Boleto por Linha Digital ---");
        System.out.println("Por favor, digite a linha digital (c√≥digo de barras, com ou sem pontos/espa√ßos):");
        
        String linhaDigitalInput = scanner.nextLine();
        String linhaDigital = linhaDigitalInput.trim().replaceAll("[^0-9]", "");

        if (linhaDigital.length() != 47) {
            System.err.println("‚ùå Erro: A linha digital deve conter 47 d√≠gitos num√©ricos. Voc√™ digitou " + linhaDigitalInput.length() + " caracteres (incluindo pontos/espa√ßos) que resultaram em " + linhaDigital.length() + " d√≠gitos num√©ricos.");
            System.err.println("Por favor, verifique a entrada. Ex: 00190000090362072700200439729179799850000222900");
            return;
        }

        System.out.println("‚úÖ Linha digital capturada e limpa: " + linhaDigital);

        Boleto boleto = new Boleto();
        boleto.setCodigoBarras(linhaDigital);

        // Valida√ß√£o da estrutura da linha digital
        System.out.println("\n--- Realizando valida√ß√£o detalhada da Linha Digital ---");
        boolean linhaDigitalEstruturaValida = ValidadorLinhaDigitavel.validar(linhaDigital);
        
        if (!linhaDigitalEstruturaValida) {
            System.out.println("‚ùå Valida√ß√£o de estrutura da Linha Digital FALHOU.");
            boleto.setStatusValidacao("ERRO_ESTRUTURA_LD"); 
            System.out.println("‚ö†Ô∏è No entanto, continuaremos com outras verifica√ß√µes.");
        } else {
             System.out.println("‚úÖ Valida√ß√£o de estrutura da Linha Digital OK.");
             boleto.setStatusValidacao("VALIDO_ESTRUTURA_LD");
        }

        System.out.println("\nEste boleto possui algum desconto? (sim/nao)");
        String temDescontoStr = scanner.nextLine().trim().toLowerCase();
        boolean temDesconto = "sim".equals(temDescontoStr);

        BigDecimal valorInformadoPeloUsuario = null;
        if (temDesconto) {
            System.out.println("Por favor, digite o valor *original* do boleto (sem descontos, formato 00.00):");
            while (valorInformadoPeloUsuario == null) {
                try {
                    String valorInput = scanner.nextLine().replace(",", ".");
                    valorInformadoPeloUsuario = new BigDecimal(valorInput);
                } catch (NumberFormatException e) {
                    System.err.println("‚ùå Formato de valor inv√°lido. Digite novamente o valor original (ex: 123.45):");
                }
            }
        } else {
            System.out.println("Por favor, digite o valor do pagamento do boleto (formato 00.00):");
            while (valorInformadoPeloUsuario == null) {
                try {
                    String valorInput = scanner.nextLine().replace(",", ".");
                    valorInformadoPeloUsuario = new BigDecimal(valorInput);
                } catch (NumberFormatException e) {
                    System.err.println("‚ùå Formato de valor inv√°lido. Digite novamente o valor (ex: 123.45):");
                }
            }
        }
        boleto.setValor(valorInformadoPeloUsuario);

        BigDecimal valorDoCodigoBarras = boleto.getValorDoCodigoBarras(); 

        System.out.println("\n--- Verifica√ß√£o do Valor Final ---");
        System.out.println("Valor informado pelo usu√°rio (sem desconto): " + valorInformadoPeloUsuario);
        System.out.println("Valor extra√≠do da linha digital: " + valorDoCodigoBarras);

        if (valorInformadoPeloUsuario.compareTo(valorDoCodigoBarras) == 0) {
            System.out.println("‚úÖ O valor informado corresponde ao valor na linha digital. Verifica√ß√£o de valor OK.");
        } else {
            System.out.println("‚ö†Ô∏è ATEN√á√ÉO: O valor informado N√ÉO corresponde ao valor na linha digital. Isso pode indicar um problema.");
        }

        System.out.println("\n--- Verifica√ß√£o do CNPJ ---");
        System.out.println("Por favor, informe o CNPJ do benefici√°rio (somente n√∫meros):");
        String cnpjInformado = scanner.nextLine().trim().replaceAll("[^0-9]", "");
        boleto.setCnpjEmitente(cnpjInformado);

        if (cnpjInformado.length() == 14) {
            System.out.println("üåê Consultando CNPJ na BrasilAPI...");
            ConsultaCNPJ consultaCnpj = new ConsultaCNPJ(boleto);
            String statusConsultaCnpj = consultaCnpj.validarDadosComApi();

            System.out.println("‚ÑπÔ∏è Status da valida√ß√£o do CNPJ com a API: " + statusConsultaCnpj);

            System.out.println("\n--- Dados do CNPJ " + cnpjInformado + " Retornados pela BrasilAPI ---");
            System.out.println("üìù Raz√£o Social: " + boleto.getRazaoSocialApi());
            System.out.println("‚ú® Nome Fantasia: " + boleto.getNomeFantasiaApi());
            System.out.println("--------------------------------------------------");

            System.out.println("\nAs informa√ß√µes do CNPJ acima est√£o corretas? (sim/nao)");
            String confirmacaoDadosCnpj = scanner.nextLine().trim().toLowerCase();

            if ("sim".equals(confirmacaoDadosCnpj)) {
                System.out.println("üëç Confirma√ß√£o dos dados do CNPJ registrada.");
                boleto.setInformacoesConfirmadasPeloUsuario(true);
                if (statusConsultaCnpj.equals("VALIDO_API")) {
                    boleto.setStatusValidacao("VALIDO_CNPJ_API_E_USUARIO");
                } else {
                    boleto.setStatusValidacao("CNPJ_CONFIRMADO_USUARIO_COM_ALERTA");
                }
            } else {
                System.out.println("üö´ Voc√™ indicou que os dados do CNPJ n√£o est√£o corretos. Marcarei como 'CNPJ_NAO_CONFIRMADO_USUARIO'.");
                boleto.setInformacoesConfirmadasPeloUsuario(false);
                boleto.setStatusValidacao("CNPJ_NAO_CONFIRMADO_USUARIO");
            }
        } else {
            System.out.println("‚ö†Ô∏è CNPJ inv√°lido. A consulta n√£o ser√° realizada. Marcarei como 'CNPJ_INVALIDO_FORMATO'.");
            boleto.setStatusValidacao("CNPJ_INVALIDO_FORMATO");
            boleto.setInformacoesConfirmadasPeloUsuario(false);
        }

        // --- IN√çCIO DA L√ìGICA PARA CONFIRMA√á√ÉO DETALHADA DO BANCO ---
        System.out.println("\n--- Verifica√ß√£o do Banco Emissor ---");
        String codigoBanco = linhaDigital.substring(0, 3);
        boleto.setBancoEmissor(codigoBanco);

        System.out.println("üè¶ C√≥digo do banco extra√≠do da linha digital: " + codigoBanco);

        ConsultaBanco consultaBanco = new ConsultaBanco(boleto);
        String statusConsultaBanco = consultaBanco.validarBancoComApi(); // Isso preenche os campos do boleto

        System.out.println("‚ÑπÔ∏è Status da valida√ß√£o do banco com a API: " + statusConsultaBanco);

        // Exibir os dados puxados da API
        // Exibir os dados puxados da API - **AQUI EST√Å A CORRE√á√ÉO**
        System.out.println("\n--- Dados do Banco " + codigoBanco + " Retornados pela BrasilAPI ---");
        // O c√≥digo do banco que voc√™ quer exibir da API √© o que est√° no boleto.getBancoEmissor()
        // OU, se voc√™ quisesse o c√≥digo retornado *pela API* (que j√° foi comparado e deve ser igual)
        // voc√™ teria que ter um campo 'codigoBancoApi' no Boleto, mas como ele j√° √© comparado e validado
        // contra o c√≥digo extra√≠do, pode usar o pr√≥prio codigoBanco.
        System.out.println("üè¶ C√≥digo do Banco (API): " + codigoBanco); // O c√≥digo extra√≠do da linha digital
        System.out.println("üìù Nome do Banco (API): " + (boleto.getNomeBancoApi() != null ? boleto.getNomeBancoApi() : "N√£o dispon√≠vel"));
        System.out.println("‚ú® Nome Completo do Banco (API): " + (boleto.getNomeCompletoBancoApi() != null ? boleto.getNomeCompletoBancoApi() : "N√£o dispon√≠vel"));
        System.out.println("üî¢ ISPB (API): " + (boleto.getIspbBancoApi() != null ? boleto.getIspbBancoApi() : "N√£o dispon√≠vel"));
        System.out.println("--------------------------------------------------");

        // Pergunta de confirma√ß√£o ao usu√°rio
        System.out.println("\nAs informa√ß√µes do banco acima est√£o corretas? (sim/nao)");
        String confirmacaoDadosBanco = scanner.nextLine().trim().toLowerCase();

        if ("sim".equals(confirmacaoDadosBanco)) {
            System.out.println("üëç Confirma√ß√£o dos dados do banco registrada.");
            // Atualiza o status do banco para indicar que foi confirmado pelo usu√°rio
            if (statusConsultaBanco.equals("VALIDO_API")) {
                boleto.setStatusValidacaoBanco("VALIDO_BANCO_API_E_USUARIO");
            } else {
                // Se a API teve um problema, mas o usu√°rio confirmou
                boleto.setStatusValidacaoBanco("BANCO_CONFIRMADO_USUARIO_COM_ALERTA"); 
            }
            boleto.setInformacoesConfirmadasPeloUsuario(true); // Opcional: considerar como confirma√ß√£o geral
        } else {
            System.out.println("üö´ Voc√™ indicou que os dados do banco n√£o est√£o corretos. Marcarei como 'BANCO_NAO_CONFIRMADO_USUARIO'.");
            boleto.setStatusValidacaoBanco("BANCO_NAO_CONFIRMADO_USUARIO");
            boleto.setInformacoesConfirmadasPeloUsuario(false); // Opcional: considerar como confirma√ß√£o geral
        }
        // --- FIM DA L√ìGICA PARA CONFIRMA√á√ÉO DETALHADA DO BANCO ---


        System.out.println("\n--- Resumo e Prepara√ß√£o para Salvamento (Simulado) ---");
        System.out.println("Linha Digital: " + boleto.getCodigoBarras());
        System.out.println("Valor Informado pelo Usu√°rio: " + boleto.getValor());
        System.out.println("Valor Extra√≠do da Linha Digital: " + boleto.getValorDoCodigoBarras());
        System.out.println("CNPJ Benefici√°rio Informado: " + boleto.getCnpjEmitente());
        System.out.println("Raz√£o Social (API): " + boleto.getRazaoSocialApi());
        System.out.println("Nome Fantasia (API): " + boleto.getNomeFantasiaApi());
        System.out.println("Situa√ß√£o Cadastral (API): " + boleto.getSituacaoCadastralApi());
        System.out.println("C√≥digo Banco (Linha Digital): " + boleto.getBancoEmissor());
        System.out.println("Nome Banco (API): " + boleto.getNomeBancoApi());
        System.out.println("Nome Completo Banco (API): " + boleto.getNomeCompletoBancoApi());
        System.out.println("ISPB (API): " + boleto.getIspbBancoApi());
        System.out.println("Informa√ß√µes CNPJ e Banco Confirmadas pelo Usu√°rio: " + (boleto.isInformacoesConfirmadasPeloUsuario() ? "Sim" : "N√£o"));
        System.out.println("Status de Valida√ß√£o Geral: " + boleto.getStatusValidacao());
        System.out.println("Status de Valida√ß√£o de Banco: " + boleto.getStatusValidacaoBanco());
        System.out.println("Simulando salvamento do boleto no banco de dados...");
        System.out.println("Simula√ß√£o de salvamento conclu√≠da.");

        System.out.println("\nProcessamento da linha digital conclu√≠do.");
    }
}